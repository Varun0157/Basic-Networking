CLIENT

Part B : Implement some TCP (?) functionality from scratch [ 18 marks ]

    Seems daunting but really isn’t (read on)

We can’t really ask you to implement the entire TCP/IP stack from scratch for about twenty marks (But, for the ones interested here’s a repo on it - https://github.com/saminiir/level-ip)

So, here’s what you actually need to do -

Implement some TCP functionality using UDP sockets

Seems hack-y? Very. But, it’s OSN not just N and the point of this course is to hopefully make you understand some stuff.

Functionalities that you have to implement are (10 marks):

    Data Sequencing: The sender (client or server - both should be able to send as well as receive data) must divide the data (assume some text) into smaller chunks (using chunks of fixed size or using a fixed number of chunks). Each chunk is assigned a number which is sent along with the transmission (use structs). The sender should also communicate the total number of chunks being sent [1]. After the receiver has data from all the chunks, it should aggregate them according to their sequence number and display the text.

    Retransmissions: The receiver must send an ACK packet for every data chunk received (The packet must reference the sequence number of the received chunk). If the sender doesn’t receive the acknowledgement for a chunk within a reasonable amount of time (say 0.1 seconds), it must resend the data. However, the sender shouldn’t wait for receiving acknowledgement for a previously sent chunk before transmitting the next chunk [2].

    [1] Regardless of whether you use a fixed number of chunks

    [2] For implementation’s sake, send ACK messages randomly to check whether retransmission is working - say, skip every third chunk’s ACK. (Please comment out this code in your final submission)

Edit: You may simulate only one client and one server as there is no specification asking for demonstrating a connection between a client and a server.

To make your life simpler, the rest of the 8 marks is a report -

    How is your implementation of data sequencing and retransmission different from traditional TCP? (If there are no apparent differences, you may mention that) (3 marks)
    How can you extend your implementation to account for flow control? You may ignore deadlocks. (5 marks)

Submit your implementation for the server and client in <mini-project2-directory>/networks/partB

client



SERVER

Part B : Implement some TCP (?) functionality from scratch [ 18 marks ]

    Seems daunting but really isn’t (read on)

We can’t really ask you to implement the entire TCP/IP stack from scratch for about twenty marks (But, for the ones interested here’s a repo on it - https://github.com/saminiir/level-ip)

So, here’s what you actually need to do -

Implement some TCP functionality using UDP sockets

Seems hack-y? Very. But, it’s OSN not just N and the point of this course is to hopefully make you understand some stuff.

Functionalities that you have to implement are (10 marks):

    Data Sequencing: The sender (client or server - both should be able to send as well as receive data) must divide the data (assume some text) into smaller chunks (using chunks of fixed size or using a fixed number of chunks). Each chunk is assigned a number which is sent along with the transmission (use structs). The sender should also communicate the total number of chunks being sent [1]. After the receiver has data from all the chunks, it should aggregate them according to their sequence number and display the text.

    Retransmissions: The receiver must send an ACK packet for every data chunk received (The packet must reference the sequence number of the received chunk). If the sender doesn’t receive the acknowledgement for a chunk within a reasonable amount of time (say 0.1 seconds), it must resend the data. However, the sender shouldn’t wait for receiving acknowledgement for a previously sent chunk before transmitting the next chunk [2].

    [1] Regardless of whether you use a fixed number of chunks

    [2] For implementation’s sake, send ACK messages randomly to check whether retransmission is working - say, skip every third chunk’s ACK. (Please comment out this code in your final submission)

Edit: You may simulate only one client and one server as there is no specification asking for demonstrating a connection between a client and a server.

To make your life simpler, the rest of the 8 marks is a report -

    How is your implementation of data sequencing and retransmission different from traditional TCP? (If there are no apparent differences, you may mention that) (3 marks)
    How can you extend your implementation to account for flow control? You may ignore deadlocks. (5 marks)

Submit your implementation for the server and client in <mini-project2-directory>/networks/partB

SERVER
